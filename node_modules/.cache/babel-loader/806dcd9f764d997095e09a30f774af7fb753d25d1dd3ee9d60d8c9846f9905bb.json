{"ast":null,"code":"var _jsxFileName = \"/Users/coding/Documents/naval-warships/src/function/TurnToPlay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, Component } from \"react\";\nimport { ref, set, onValue, get, child, update, push, remove, refFromURL, increment } from \"firebase/database\";\nimport { db } from \"../config/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StatusOpponent() {\n  _s();\n  const playCode = localStorage.playCode;\n  const playerName = localStorage.playerName;\n  const playerNum = localStorage.playerNum;\n\n  // const [playCode, setPlayCode] = useState(\"\");\n  // const [playerName, setplayerName] = useState(\"\");\n  // const [playerNum, setplayerNum] = useState(1);\n  var [StatusText, setStatusText] = useState();\n  var [GameStart, setGameStart] = useState(false);\n  var [GameFinishP1, setGameFinishP1] = useState(false);\n  var [GameFinishP2, setGameFinishP2] = useState(false);\n  var [ShowTurn, setShowTurn] = useState({\n    name: \"\",\n    number: 0\n  });\n  var Turn, MyTurn;\n  function TakeTurnToPlay() {\n    const Path = ref(db, `Games/CodeToPlay_${playCode}/GameInfo/turnIsTo`);\n    onValue(Path, snapshot => {\n      // Code exécuter à chaque changement de `Games/CodeToPlay_${playCode}/GameInfo/turnIsTo` //\n      if (snapshot.exists()) {\n        var dataTurn = snapshot.val();\n        Turn = [dataTurn.name, dataTurn.number];\n        setShowTurn({\n          name: dataTurn.name,\n          number: dataTurn.number\n        });\n\n        // Teste si le tour sur la BDD correspond à Numéraux du joueur //\n        if (Turn[1] === playerNum) {\n          // Si oui C'est Bien son tour //\n          MyTurn = true;\n        } else {\n          // Si Non Ce n'est pas encore sont Tour //\n          MyTurn = false;\n        }\n      }\n    });\n  }\n  function TurnToPlay() {\n    // Affiche à qui c'est de jouer //\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"info\",\n      className: \"my-3 mt-5\",\n      children: [\"It is turn to\", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"turn\",\n          children: [\" \", ShowTurn.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(StatusOpponent, \"ocYisJ8I76dO8MYRC5+e3VLs1+Y=\");\n_c = StatusOpponent;\nexport default StatusOpponent;\nvar _c;\n$RefreshReg$(_c, \"StatusOpponent\");","map":{"version":3,"names":["React","useEffect","useState","Component","ref","set","onValue","get","child","update","push","remove","refFromURL","increment","db","jsxDEV","_jsxDEV","StatusOpponent","_s","playCode","localStorage","playerName","playerNum","StatusText","setStatusText","GameStart","setGameStart","GameFinishP1","setGameFinishP1","GameFinishP2","setGameFinishP2","ShowTurn","setShowTurn","name","number","Turn","MyTurn","TakeTurnToPlay","Path","snapshot","exists","dataTurn","val","TurnToPlay","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/coding/Documents/naval-warships/src/function/TurnToPlay.jsx"],"sourcesContent":["import React, { useEffect, useState, Component } from \"react\";  \nimport {\n  ref,\n  set,\n  onValue,\n  get,\n  child,\n  update,\n  push,\n  remove,\n  refFromURL,\n  increment,\n} from \"firebase/database\";\nimport { db } from \"../config/config\";\n\nfunction StatusOpponent(){\n\nconst playCode = localStorage.playCode;\nconst playerName = localStorage.playerName;\nconst playerNum = localStorage.playerNum;\n\n// const [playCode, setPlayCode] = useState(\"\");\n// const [playerName, setplayerName] = useState(\"\");\n// const [playerNum, setplayerNum] = useState(1);\nvar [StatusText, setStatusText] = useState();\nvar [GameStart, setGameStart] = useState(false);\nvar [GameFinishP1, setGameFinishP1] = useState(false);\nvar [GameFinishP2, setGameFinishP2] = useState(false);\nvar [ShowTurn, setShowTurn] = useState({ name: \"\", number: 0 });\n\nvar Turn, MyTurn;\n\n\n  function TakeTurnToPlay(){\n    const Path = ref(db, `Games/CodeToPlay_${playCode}/GameInfo/turnIsTo`);\n    onValue(Path, (snapshot) => {\n      // Code exécuter à chaque changement de `Games/CodeToPlay_${playCode}/GameInfo/turnIsTo` //\n      if (snapshot.exists()) {\n        var dataTurn = snapshot.val();\n        Turn = [dataTurn.name, dataTurn.number];\n        setShowTurn({ name: dataTurn.name, number: dataTurn.number });\n\n        // Teste si le tour sur la BDD correspond à Numéraux du joueur //\n        if (Turn[1] === playerNum) {\n          // Si oui C'est Bien son tour //\n          MyTurn = true;\n        } else {\n          // Si Non Ce n'est pas encore sont Tour //\n          MyTurn = false;\n        }\n      }\n    });\n  }\n\n  function TurnToPlay(){\n    // Affiche à qui c'est de jouer //\n    return (\n      <h2 id=\"info\" className=\"my-3 mt-5\">\n        It is turn to\n        <b>\n          <span id=\"turn\">\n            {\" \"}\n            {ShowTurn.name}\n          </span>\n        </b>\n      </h2>\n    );\n  }\n  \n  return(\n    <div className=\"\">\n    </div>\n  )\n}\n\nexport default StatusOpponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7D,SACEC,GAAG,EACHC,GAAG,EACHC,OAAO,EACPC,GAAG,EACHC,KAAK,EACLC,MAAM,EACNC,IAAI,EACJC,MAAM,EACNC,UAAU,EACVC,SAAS,QACJ,mBAAmB;AAC1B,SAASC,EAAE,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,cAAcA,CAAA,EAAE;EAAAC,EAAA;EAEzB,MAAMC,QAAQ,GAAGC,YAAY,CAACD,QAAQ;EACtC,MAAME,UAAU,GAAGD,YAAY,CAACC,UAAU;EAC1C,MAAMC,SAAS,GAAGF,YAAY,CAACE,SAAS;;EAExC;EACA;EACA;EACA,IAAI,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGtB,QAAQ,CAAC,CAAC;EAC5C,IAAI,CAACuB,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAC/C,IAAI,CAACyB,YAAY,EAAEC,eAAe,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACrD,IAAI,CAAC2B,YAAY,EAAEC,eAAe,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EACrD,IAAI,CAAC6B,QAAQ,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC;IAAE+B,IAAI,EAAE,EAAE;IAAEC,MAAM,EAAE;EAAE,CAAC,CAAC;EAE/D,IAAIC,IAAI,EAAEC,MAAM;EAGd,SAASC,cAAcA,CAAA,EAAE;IACvB,MAAMC,IAAI,GAAGlC,GAAG,CAACU,EAAE,EAAG,oBAAmBK,QAAS,oBAAmB,CAAC;IACtEb,OAAO,CAACgC,IAAI,EAAGC,QAAQ,IAAK;MAC1B;MACA,IAAIA,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE;QACrB,IAAIC,QAAQ,GAAGF,QAAQ,CAACG,GAAG,CAAC,CAAC;QAC7BP,IAAI,GAAG,CAACM,QAAQ,CAACR,IAAI,EAAEQ,QAAQ,CAACP,MAAM,CAAC;QACvCF,WAAW,CAAC;UAAEC,IAAI,EAAEQ,QAAQ,CAACR,IAAI;UAAEC,MAAM,EAAEO,QAAQ,CAACP;QAAO,CAAC,CAAC;;QAE7D;QACA,IAAIC,IAAI,CAAC,CAAC,CAAC,KAAKb,SAAS,EAAE;UACzB;UACAc,MAAM,GAAG,IAAI;QACf,CAAC,MAAM;UACL;UACAA,MAAM,GAAG,KAAK;QAChB;MACF;IACF,CAAC,CAAC;EACJ;EAEA,SAASO,UAAUA,CAAA,EAAE;IACnB;IACA,oBACE3B,OAAA;MAAI4B,EAAE,EAAC,MAAM;MAACC,SAAS,EAAC,WAAW;MAAAC,QAAA,GAAC,eAElC,eAAA9B,OAAA;QAAA8B,QAAA,eACE9B,OAAA;UAAM4B,EAAE,EAAC,MAAM;UAAAE,QAAA,GACZ,GAAG,EACHf,QAAQ,CAACE,IAAI;QAAA;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAET;EAEA,oBACElC,OAAA;IAAK6B,SAAS,EAAC;EAAE;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEV;AAAChC,EAAA,CA1DQD,cAAc;AAAAkC,EAAA,GAAdlC,cAAc;AA4DvB,eAAeA,cAAc;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}